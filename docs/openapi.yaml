openapi: "3.0.3"
info:
  title: Foodshelf-Manager-API 
  description: |-
    食品の賞味期限管理アプリの仕様書です。
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: food
    description:  食品の賞味期限に関する操作

paths:
  /food:
    get:
      tags:
        - food
      summary: 食品情報の取得
      description: クエリパラメータで入力された条件に合致する食品の賞味期限を取得する。条件を入力しない場合は全ての食品の送付状況を取得する
      parameters:
        - name: foodName
          in: query
          description: 食品名に入力した文字が部分一致する食品が検索される。
          required: false
          schema:
            type: string
          example: 鶏肉
        - name: expirationDate
          in: query
          description: 指定した日付で賞味期限切れの食品が検索される。
          required: false
          schema:
            type: string
          example: 2023-12-01
        - name: sendingTimes 
          in: query
          description: 送付回数が入力した回数の人の送付状況が検索される
          required: false
          schema:
            type: integer
          example: 3
       
      
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    foodName:
                      type: string
                      example: 鶏肉
                    expirationDate:
                      type: string
                      example: 2023-12-01
                    sendingTimes:
                      type: integer
                      example: 3
                
    post:
      tags:
        - food
      summary: 新規食品の登録
      description: 食品を新たに登録する。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                foodName:
                  type: string
                  nullable: false
                  example: 鶏肉
                
                expirationDate:
                  type: string
                  nullable: false
                  example: 2023-12-01
                
                sendingTimes:
                  type: integer
                  nullable: false
                  example: 3
                
                
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 食品情報が正常に登録されました
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestfood'
                

  /food/{id}:
    get:
      tags:
        - food
      summary: 指定した食品IDの食品情報を取得
      description: 指定した食品IDの食品情報を取得する。
      parameters:
        - name: id
          in: path
          description: 取得したい食品の食品ID
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    foodName:
                      type: string
                      example: 鶏肉
                    expirationDate:
                      type: string
                      example: 2023-12-01
                    sendingTimes:
                      type: integer
                      example: 3
                

        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

    patch:
      tags:
        - food
      summary: 指定した食品IDの食品情報を更新
      description: 指定した食品IDの食品情報を更新する。
      parameters:
        - name: id
          in: path
          description: 更新したい食品の食品ID
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
             schema:
              type: object
              properties:
                foodName:
                  type: string
                  nullable: false
                  example: 鶏肉
                
                expirationDate:
                  type: string
                  nullable: false
                  example: 2023-12-10
                
                sendingTimes:
                  type: integer
                  nullable: false
                  example: 3
      
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 食品情報が正常に更新されました
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestfood'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

    delete:
      tags:
        - food
      summary: 指定した食品IDの食品情報を削除
      description: 指定した食品IDの食品情報を削除する。
      parameters:
        - name: id
          in: path
          description: 削除したい食品ID
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 食品情報が正常に削除されました
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  
  




components:
  schemas:
    
    BadRequestfood:
      description: 食品情報に関する操作でリクエストボディに不備がある場合のレスポンス
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: string
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: 必須項目を40文字以内で入力してください。
        path:
          type: string
          example: 指定したパス


    NotFound:
      description: 指定したリソースが存在しない場合のレスポンス
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: string
          example: 404
        error:
          type: string
          example: Not Found
        message:
          type: string
          example: Not Found
        path:
          type: string
          example: 指定したパス